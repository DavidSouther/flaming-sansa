angular.module('demos.template', [])
.run(function($templateCache){
    $templateCache.put('demos', '<ion-tabs class="tabs-balanced"><ion-tab title="Trig" ui-sref="demo.trig"><ion-nav-view name="demo-trig"></ion-nav-view></ion-tab><ion-tab title="Bar" ui-sref="demo.bar"><ion-nav-view name="demo-bar"></ion-nav-view></ion-tab><ion-tab title="Line" ui-sref="demo.line"><ion-nav-view name="demo-line"></ion-nav-view></ion-tab></ion-tabs>');
});
angular.module('charts.axis.template', [])
.run(function($templateCache){
    $templateCache.put('charts/axis', '<svg><g style="transform: translateY({{$scales.y($chartOptions.range.y.min)}}px)" class="axis x"><path draw-path="\'M\'+$scales.x($chartOptions.range.x.min)+\',0L\' + $scales.x($chartOptions.range.x.max) + \',0\'"></path><g ng-repeat="tick in $ticks.x" style="transform: translateX({{$scales.x(tick)}}px)" class="tick"><path d="M0,0L0,5"></path><text at="[ -20, 20]">{{ tick | chooseFilter:$format.x.type:$format.x.args }}</text></g></g><g style="transform: translateX({{$scales.x($chartOptions.range.x.min)}}px)" class="axis y"><path draw-path="\'M0,\' + $scales.y($chartOptions.range.y.min) + \'L0,\' + $scales.y($chartOptions.range.y.max)"></path><g ng-repeat="tick in $ticks.y" style="transform: translateY({{$scales.y(tick)}}px)" class="tick"><path d="M0,0L-5,0"></path><text at="[ -35, 5 ]">{{ tick | chooseFilter:$format.y.type:$format.y.args }}</text></g></g></svg>');
});
angular.module('charts.bar.template', [])
.run(function($templateCache){
    $templateCache.put('charts/bar', '<svg base-chart="base-chart" width="100%" height="100%" graph-scales="{        x: [$chartOptions.scale.x, $chartOptions.range.x.min, $chartOptions.range.x.max],        y: [$chartOptions.scale.x, $chartOptions.range.y.max, $chartOptions.range.y.min],    }" shape-rendering="geometricPrecision" class="chart chart-bar"><g class="decor"><axis></axis></g><g class="graph"><g ng-init="" class="bars"><rect ng-repeat="point in chartData" graph-tooltip="{{ \'\' + $chartOptions.x(point) + \', \' + $chartOptions.y(point) }}" at="[                     $scales.x($chartOptions.x(point)) - (barWidth / 2),                     $scales.y($chartOptions.y(point))                 ]" ng-attr-width="{{ barWidth - 2 }}" ng-attr-height="{{                     $scales.y($chartOptions.range.y.min) -                     $scales.y($chartOptions.y(point))                 }}" fill="#ef4e3a" stroke="#111" stroke-width="1" class="bar"></rect></g></g></svg>');
});
angular.module('charts.line.template', [])
.run(function($templateCache){
    $templateCache.put('charts/line', '<svg base-chart="base-chart" width="100%" height="100%" graph-scales="{        x: [\'linear\', $chartOptions.range.x.min, $chartOptions.range.x.max],        y: [\'linear\', $chartOptions.range.y.max, $chartOptions.range.y.min],    }" shape-rendering="geometricPrecision" class="chart chart-line scatter"><g class="decor"><axis></axis></g><g class="graph"><path draw-path=" chartData | path:$chartOptions:$scales.x:$scales.y " class="line"></path><circle ng-repeat="point in chartData" center="[                $scales.x($chartOptions.x(point)),                $scales.y($chartOptions.y(point))             ]" r="4" class="point"></circle></g></svg>');
});
angular.module('demos.bar.template', [])
.run(function($templateCache){
    $templateCache.put('demos/bar', '<ion-view title="Bar Demo"><ion-content id="bar-demo" class="padding"><h1>Bar Demo</h1><bar-chart style="height: 480px; width: 720px; margin: 0 auto;" chart-data="demoData" chart-options="{                x: \'timestamp\',                 y: \'rtt\',                 range: {y: {min: 0, max: 1000}},                 scale: {x: \'log\'},                 axis: {                    tickCount: 8,                    format: {                        y: [\'number\', 0],                        x: [\'date\', \'mm:ss.sss\']                    }                }            }"></bar-chart></ion-content></ion-view>');
});
angular.module('demos.line.template', [])
.run(function($templateCache){
    $templateCache.put('demos/line', '<ion-view title="Line Demo"><ion-content id="line-demo" class="padding"><h1>Line Demo</h1><line-chart style=" display: block; height: 480px; width: 720px; margin: 0 auto;" chart-data="demoData" chart-options="{x: \'year\', y: \'sales\', range: {y: {min: 1}}}"></line-chart></ion-content></ion-view>');
});
angular.module('demos.trig.template', [])
.run(function($templateCache){
    $templateCache.put('demos/trig', '<ion-view title="Trig Demo"><ion-content id="trig-demo" class="padding"><svg width="760px" height="260px" ng-init="                x = { min: -1.2, max: 5 };                y = {};                y.max = (260 * (x.max - x.min)) * (1 / (2 * 760));                y.min = -y.max;                time = 0;                delta = .015 / 2;                value = {x: Math.PI, y: 0};            " graph-scales="{                x: [\'linear\', x.min, x.max],                y: [\'linear\', y.min, y.max]            }"><g ng-controller="TrigCtrl" ng-init="                    x.scaled = {                         min: $scales.x(x.min),                         max: $scales.x(x.max),                         zero: $scales.x(0),                         PI: $scales.x(Math.PI)                     };                     y.scaled = {                         min: $scales.y(y.min),                         max: $scales.y(y.max),                         zero: $scales.y(0),                         PI: $scales.y(Math.PI)                     };                 " graph-tick="                    time = time + delta;                    value.x = $scales.x(  Math.cos(time) );                    value.y = $scales.y( -Math.sin(time) );                " class="vis trig"><g class="decor"><g class="X"><line from="[x.scaled.min, y.scaled.zero]" to="[x.scaled.max, y.scaled.zero]" class="axis"></line><g class="tick"><line from="[x.scaled.PI, y.scaled.zero]" to="[x.scaled.PI, y.scaled.zero + 8]" class="axis"></line><text at="[x.scaled.PI, y.scaled.zero + 24]" text-anchor="middle">Ï€</text></g></g><g class="Y"><line from="[x.scaled.zero, y.scaled.min]" to="[x.scaled.zero, y.scaled.max]" class="axis"></line></g></g><g class="graph"><path ng-attr-d="{{ data | path:sine:$scales.x:$scales.y }}" class="sine"></path><line from="[value.x, y.scaled.zero]" to="[value.x, value.y]" class="sine"></line><path ng-attr-d="{{ data | path:cosine:$scales.x:$scales.y }}" class="cosine"></path><line from="[ x.scaled.zero, value.y ]" to="[ value.x, value.y ]" class="cosine"></line><line from="[x.scaled.zero, y.scaled.zero]" to="[                             $scales.x(Math.sign(Math.cos(time))),                             $scales.y(                                -Math.sign(Math.sin(time)) *                                 Math.abs(Math.sin(time) / Math.cos(time))                             )                         ]                        " class="exsecant"></line><line from="[                             $scales.x(Math.sign(Math.cos(time))),                             y.scaled.zero                         ]" to="[                             $scales.x(Math.sign(Math.cos(time))),                             $scales.y(                                -Math.sign(Math.sin(time)) *                                 Math.abs(Math.sin(time) / Math.cos(time))                             )                         ]                        " class="tangent"></line><line from="[ x.scaled.zero, y.scaled.zero ]" to="[value.x, value.y]" class="hypotenuse"></line><circle center="[x.scaled.zero, y.scaled.zero]" radius=" $scales.x(1) - $scales.x(0) " class="circle"></circle><circle center="[ x.scaled.zero, value.y ]" r="4" class="dot"></circle><text at="[2, 24]" class="label">R = {{ Math.floor( time / Math.PI ) }}</text></g></g></svg></ion-content></ion-view>');
});
angular.module('svg.graphTooltip.template', [])
.run(function($templateCache){
    $templateCache.put('svg/graphTooltip', '<svg id="graphingTooltip" width="100%" height="100%"><g ng-attr-visibility="{{ tooltipData.show ? \'visible\' : \'hidden\' }}" style="background: peach;"><text at="tooltipData.position">{{ tooltipData.text }}</text></g></svg>');
});